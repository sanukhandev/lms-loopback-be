import {authenticate} from '@loopback/authentication';
import {authorize} from '@loopback/authorization';
import {inject} from '@loopback/core';
import {Filter, repository} from '@loopback/repository';
import {
  HttpErrors,
  Request,
  RestBindings,
  SchemaObject,
  get,
  param,
  patch,
  post,
  requestBody,
  response,
} from '@loopback/rest';
import {randomBytes} from 'node:crypto';
import {Logger} from 'pino';
import {PasswordHasher} from '../auth/types';
import {AuthBindings, LoggingBindings} from '../bindings/keys';
import {User} from '../models';
import {UserRepository} from '../repositories';
import {extractTenantId, sanitizeTenantId} from '../utils/tenant';

const INSTRUCTOR_VIEW_SCHEMA: SchemaObject = {
  type: 'object',
  properties: {
    id: {type: 'string'},
    email: {type: 'string', format: 'email'},
    firstName: {type: 'string'},
    lastName: {type: 'string'},
    roles: {
      type: 'array',
      items: {type: 'string'},
      description: 'Assigned roles for the user within the tenant',
    },
    status: {type: 'string'},
    tenantId: {type: 'string'},
    createdAt: {type: 'string', format: 'date-time'},
    updatedAt: {type: 'string', format: 'date-time'},
  },
};

const INSTRUCTOR_CREATE_SCHEMA: SchemaObject = {
  type: 'object',
  required: ['email', 'firstName', 'lastName'],
  properties: {
    email: {type: 'string', format: 'email'},
    firstName: {type: 'string', minLength: 1},
    lastName: {type: 'string', minLength: 1},
    password: {type: 'string', minLength: 8},
    status: {
      type: 'string',
      enum: ['active', 'invited', 'inactive', 'suspended'],
      default: 'active',
    },
  },
};

const INSTRUCTOR_UPDATE_SCHEMA: SchemaObject = {
  type: 'object',
  properties: {
    firstName: {type: 'string', minLength: 1},
    lastName: {type: 'string', minLength: 1},
    password: {type: 'string', minLength: 8},
    status: {
      type: 'string',
      enum: ['active', 'invited', 'inactive', 'suspended'],
    },
  },
};

interface InstructorCreateRequest {
  email: string;
  firstName: string;
  lastName: string;
  password?: string;
  status?: string;
}

interface InstructorUpdateRequest {
  firstName?: string;
  lastName?: string;
  password?: string;
  status?: string;
}

interface InstructorView {
  id?: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: string[];
  status?: string;
  tenantId: string;
  createdAt?: string;
  updatedAt?: string;
}

interface InstructorCreateResponse {
  instructor: InstructorView;
  temporaryPassword?: string;
}

@authenticate('jwt')
export class InstructorsController {
  constructor(
    @repository(UserRepository)
    private readonly userRepository: UserRepository,
    @inject(AuthBindings.PASSWORD_HASHER)
    private readonly passwordHasher: PasswordHasher,
    @inject(RestBindings.Http.REQUEST)
    private readonly request: Request,
    @inject(LoggingBindings.LOGGER)
    private readonly logger: Logger,
  ) { }

  @authorize({allowedRoles: ['tenantAdmin']})
  @post('/tenant/instructors')
  @response(201, {
    description: 'Create an instructor within the current tenant',
    content: {
      'application/json': {
        schema: {
          type: 'object',
          properties: {
            instructor: INSTRUCTOR_VIEW_SCHEMA,
            temporaryPassword: {
              type: 'string',
              description:
                'Password generated by the system when one is not supplied',
            },
          },
        },
      },
    },
  })
  async createInstructor(
    @requestBody({content: {'application/json': {schema: INSTRUCTOR_CREATE_SCHEMA}}})
    body: InstructorCreateRequest,
  ): Promise<InstructorCreateResponse> {
    const tenantId = sanitizeTenantId(extractTenantId(this.request));
    const email = body.email.toLowerCase();

    const existing = await this.userRepository.findOne({
      where: {email, tenantId},
    });
    if (existing) {
      this.logger.warn(
        this.buildLogContext(tenantId, {
          email,
          instructorId: existing.id,
        }),
        'instructor email already registered',
      );
      throw new HttpErrors.Conflict(
        'Email is already registered for this tenant',
      );
    }

    const password = body.password ?? this.generateTemporaryPassword();
    const hashedPassword = await this.passwordHasher.hashPassword(password);

    const user = await this.userRepository.create({
      email,
      firstName: body.firstName,
      lastName: body.lastName,
      password: hashedPassword,
      roles: ['instructor'],
      status: this.validateStatus(body.status) ?? 'active',
      tenantId,
    });

    const response: InstructorCreateResponse = {
      instructor: this.toView(user),
      temporaryPassword: body.password ? undefined : password,
    };

    this.logger.info(
      this.buildLogContext(tenantId, {
        instructorId: user.id,
        email,
        status: response.instructor.status,
        generatedPassword: !body.password,
      }),
      'instructor created',
    );

    return response;
  }

  @authorize({allowedRoles: ['tenantAdmin']})
  @get('/tenant/instructors')
  @response(200, {
    description: 'List instructors for the current tenant',
    content: {
      'application/json': {
        schema: {type: 'array', items: INSTRUCTOR_VIEW_SCHEMA},
      },
    },
  })
  async listInstructors(
    @param.query.string('status') status?: string,
  ): Promise<InstructorView[]> {
    const tenantId = sanitizeTenantId(extractTenantId(this.request));
    const filter: Filter<User> = {
      where: {
        tenantId,
      },
      order: ['createdAt DESC'],
    };

    if (status) {
      filter.where = {
        ...filter.where,
        status,
      };
    }

    const instructors = await this.userRepository.find(filter);
    const result = instructors
      .filter(instructor => (instructor.roles ?? []).includes('instructor'))
      .map(instructor => this.toView(instructor));

    this.logger.info(
      this.buildLogContext(tenantId, {
        statusFilter: status,
        resultCount: result.length,
      }),
      'instructors listed',
    );

    return result;
  }

  @authorize({allowedRoles: ['tenantAdmin']})
  @get('/tenant/instructors/{id}')
  @response(200, {
    description: 'Retrieve a specific instructor',
    content: {'application/json': {schema: INSTRUCTOR_VIEW_SCHEMA}},
  })
  async getInstructor(
    @param.path.string('id') id: string,
  ): Promise<InstructorView> {
    const tenantId = sanitizeTenantId(extractTenantId(this.request));
    const instructor = await this.userRepository.findById(id);
    this.ensureInstructorAccess(instructor, tenantId);
    this.logger.debug(
      this.buildLogContext(tenantId, {
        instructorId: instructor.id,
      }),
      'instructor retrieved',
    );
    return this.toView(instructor);
  }

  @authorize({allowedRoles: ['tenantAdmin']})
  @patch('/tenant/instructors/{id}')
  @response(200, {
    description: 'Update an instructor profile',
    content: {'application/json': {schema: INSTRUCTOR_VIEW_SCHEMA}},
  })
  async updateInstructor(
    @param.path.string('id') id: string,
    @requestBody({content: {'application/json': {schema: INSTRUCTOR_UPDATE_SCHEMA}}})
    body: InstructorUpdateRequest,
  ): Promise<InstructorView> {
    const tenantId = sanitizeTenantId(extractTenantId(this.request));
    const instructor = await this.userRepository.findById(id);
    this.ensureInstructorAccess(instructor, tenantId);

    const updateData: Partial<User> = {};
    if (body.firstName) {
      updateData.firstName = body.firstName;
    }
    if (body.lastName) {
      updateData.lastName = body.lastName;
    }
    if (body.status) {
      updateData.status = this.validateStatus(body.status);
    }
    if (body.password) {
      updateData.password = await this.passwordHasher.hashPassword(
        body.password,
      );
    }

    if (Object.keys(updateData).length === 0) {
      this.logger.debug(
        this.buildLogContext(tenantId, {
          instructorId: id,
          noChanges: true,
        }),
        'instructor update skipped',
      );
      return this.toView(instructor);
    }

    updateData.updatedAt = new Date().toISOString();
    await this.userRepository.updateById(id, updateData);

    const updated = await this.userRepository.findById(id);
    this.logger.info(
      this.buildLogContext(tenantId, {
        instructorId: id,
        updatedFields: Object.keys(updateData).filter(field => field !== 'password'),
        passwordReset: Boolean(body.password),
      }),
      'instructor updated',
    );
    return this.toView(updated);
  }

  private validateStatus(status?: string): string | undefined {
    if (!status) {
      return undefined;
    }

    const allowed = ['active', 'invited', 'inactive', 'suspended'];
    if (!allowed.includes(status)) {
      throw new HttpErrors.BadRequest(
        `Invalid status value. Allowed values: ${allowed.join(', ')}`,
      );
    }

    return status;
  }

  private ensureInstructorAccess(instructor: User, tenantId: string): void {
    const baseContext = this.buildLogContext(tenantId, {
      instructorId: instructor.id,
    });
    if (!instructor.tenantId) {
      this.logger.error(baseContext, 'instructor missing tenant context');
      throw new HttpErrors.BadRequest('Instructor record is missing tenant context');
    }

    if (sanitizeTenantId(instructor.tenantId) !== tenantId) {
      this.logger.warn(
        {
          ...baseContext,
          instructorTenantId: instructor.tenantId,
        },
        'instructor tenant mismatch',
      );
      throw new HttpErrors.Forbidden('Instructor does not belong to this tenant');
    }

    const roles = instructor.roles ?? [];
    if (!roles.includes('instructor')) {
      this.logger.warn(
        {
          ...baseContext,
          roles,
        },
        'target user is not an instructor',
      );
      throw new HttpErrors.Forbidden('Target user is not an instructor');
    }
  }

  private toView(user: User): InstructorView {
    return {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      roles: user.roles ?? [],
      status: user.status,
      tenantId: user.tenantId,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    };
  }

  private generateTemporaryPassword(): string {
    return randomBytes(6).toString('base64url');
  }

  private buildLogContext(
    tenantId: string,
    extra?: Record<string, unknown>,
  ): Record<string, unknown> {
    return {
      tenantId,
      method: this.request.method,
      path: this.request.originalUrl ?? this.request.url,
      correlationId: this.getCorrelationId(),
      ...extra,
    };
  }

  private getCorrelationId(): string | undefined {
    const requestId = this.request.headers['x-request-id'];
    if (Array.isArray(requestId)) {
      return requestId[0];
    }

    const correlationId = this.request.headers['x-correlation-id'];
    if (Array.isArray(correlationId)) {
      return correlationId[0];
    }

    return requestId ?? correlationId;
  }
}
